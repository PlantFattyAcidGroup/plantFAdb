<% content_for :head do -%>
	<script src="http://d3js.org/d3.v3.min.js"/>
<% end -%>
	
<% content_for :jumbo do -%>
<div class="row">
	<div class="col-md-8">
		<h1>Plant Fatty Acid Database</h1>
		<p style='text-align: justify;'>
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
		</p>
	</div>
	<div class="col-md-4">
		<%= image_tag "castor.jpg", class: 'img-thumbnail' %>
	</div>
</div>
<% end -%>

<div id='tree'></div>
<div id='icicle' class='graph'></div>
<div class="mouse tooltip" >Mouse-tracking HTML Tip</div>
<style>

.text {
	text-shadow:2px 2px 1px #444;
}

.tooltip {
	border-radius: 5px;
	padding: 1em;
  pointer-events:none;
  opacity:0;
  transition: opacity 0.3s;
	text-shadow:2px 2px 1px #444;
	box-shadow:3px 3px 5px #444;
	border:2px solid #FFF;
	background-color: #89A;
	color: #FFF;
	position: absolute;
/*  text-align:center;*/
}
path {
  stroke: #fff;
  fill-rule: evenodd;
}
rect {
  stroke: #fff;
}
</style>

<script>

//var width = 960,
var width = $("#icicle").width()
    height = 500;

var x = d3.scale.linear()
    .range([0, width]);

var y = d3.scale.linear()
    .range([0, height]);

var color = d3.scale.category20b();

//var partition = d3.layout.partition()
    //.children(function(d) { return isNaN(d.value) ? d3.entries(d.value) : null; })
    //.value(function(d) { return d.value });
		
		var partition = d3.layout.partition()
		    .sort(null)
		    //.value(function(d) { return 1; });
				.value(function(d) { return d.value });
				
var svg = d3.select("#icicle").append("svg")
    .attr("width", width)
    .attr("height", height);


var tooltip = d3.select(".tooltip")
var	root = <%= @tree.to_json.html_safe %>

  var g = svg.selectAll("g")
		.data(partition(root[0]))
    .enter().append("g")
	var rect = g.append("a")
    .each( function(d){ if(!d.children){d3.select(this).attr("target",'_blank').attr("xlink:href", "<%= plants_url %>?query="+d.name) } })
		.append("rect")
    .attr("x", function(d) { return x(d.x); })
    .attr("y", function(d) { return y(d.y); })
    .attr("width", function(d) { return x(d.dx); })
    .attr("height", function(d) { return y(d.dy); })
    .attr("fill", function(d) { return color((d.children ? d : d.parent).common_name); })
    .on("click", clicked)
		.on('mouseover', function(d){
			tooltip.style("opacity", "1")
			.html(d.name+" ("+d.common_name+")")
			.style('background-color',color((d.children ? d : d.parent).common_name))
		})
		.on('mousemove', function(d){
			tooltip
			.style("left", Math.max(0, d3.event.pageX - 15) + "px")
      .style("top", (d3.event.pageY - 60) + "px");
		})
		.on('mouseout', function(d){
			return tooltip.style("opacity", "0");
		})
			
	var text = g.append("text")
		.classed('text',true)
		.text(function(d) { return d.common_name})
		.attr('font-size',12)
		.attr('fill',"#FFF")
		.attr("opacity", function(d){return x(d.dx) > this.getComputedTextLength() ? '1' : '0'})
		.attr("y", function(d) { return y(d.y) + (y(d.dy)/2) ; })
		.attr("x", function(d){return x(d.x) + (x(d.dx)/2) - (this.getComputedTextLength()/2)})
		.attr("pointer-events", "none")
	
function clicked(d) {

	if(d.children){
	  x.domain([d.x, d.x + d.dx]);
	  y.domain([d.y, 1]).range([d.y ? 20 : 0, height]);

	  rect.transition()
	      .duration(750)
	      .attr("x", function(d) { return x(d.x); })
	      .attr("y", function(d) { return y(d.y); })
	      .attr("width", function(d) { return x(d.x + d.dx) - x(d.x); })
	      .attr("height", function(d) { return y(d.y + d.dy) - y(d.y); });
	
		text.transition()
			.duration(750)
			.attr("y", function(d) { return y(d.y) + (y(d.y + d.dy) - y(d.y))/2 ; })
			.attr("x", function(d){return x(d.x) + (x(d.x + d.dx) - x(d.x))/2 - (this.getComputedTextLength()/2)})
			.attr("opacity",function(d){return (x(d.x + d.dx) - x(d.x)) > this.getComputedTextLength() ? '1' : '0'})
	}else{
		// Leaf nodes open new page
		//window.location
	}
}

</script>

<script>
//
// function computeTextRotation(d) {
// 	  return (x(d.x + d.dx / 2) - Math.PI / 2) / Math.PI * 180;
// }
//
// var width = 900,
//     height = 700,
//     radius = Math.min(width, height) / 2;
//
// var x = d3.scale.linear()
//     .range([0, 2 * Math.PI]);
//
// var y = d3.scale.sqrt()
//     .range([0, radius]);
//
// var color = d3.scale.category20b();
//
// var svg = d3.select("#tree").append("svg")
//     .attr("width", width)
//     .attr("height", height)
//   .append("g")
//     .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
//
// var partition = d3.layout.partition()
//     .sort(null)
//     .value(function(d) { return 1; });
//
// var arc = d3.svg.arc()
//     .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })
//     .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })
//     .innerRadius(function(d) { return Math.max(0, y(d.y)); })
//     .outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)); });
//
// // Keep track of the node that is currently being displayed as the root.
// var node;
//
// var	root = <%= @tree.to_json.html_safe %>
// root=root[0];
//   node = root;
//   var g = svg.datum(root).selectAll("path")
//       .data(partition.nodes)
//     .enter().append("g")
//
// 	var path = g.append("path")
//   	//.attr("display", function(d) { return d.depth ? null : "none"; }) // hide inner ring
//     .attr("d", arc)
// 		.style("fill", function(d){ return color((d.children ? d : d.parent).name); })
// 		.on("click", click)
//     .each(stash);
//
//
// // labels
//
// 	var text = g.append("text")
// 		.text(function(d) { return d.name})
// 		.attr("x", function(d) { return y(d.y); })
// 		// translate to the desired point and set the rotation
// 		.attr("transform", function(d) { return "rotate(" + computeTextRotation(d) + ")"; })
// 		.attr("dx", "6") // margin
// 		.attr("dy", ".35em") // vertical-align
// 		.attr("pointer-events", "none");
//
//   d3.selectAll("input").on("change", function change() {
//     var value = this.value === "count"
//         ? function() { return 1; }
//         : function(d) { return d.size; };
//
//     path
// 				.data(partition.value(value).nodes)
//       .transition()
//         .duration(700)
//         .attrTween("d", arcTweenData);
//   });
//
//   function click(d) {
//     node = d;
//     // fade out all text elements
//     text.transition().attr("opacity", 0);
//     path.transition()
//       .duration(1000)
//       .attrTween("d", arcTweenZoom(d))
// 			.each("end", function(e, i) {
// 	      // check if the animated element's data e lies within the visible angle span given in d
// 	      if (e.x >= d.x && e.x < (d.x + d.dx)) {
// 	        // get a selection of the associated text element
// 	        var arcText = d3.select(this.parentNode).select("text");
// 	        // fade in the text element and recalculate positions
// 	        arcText.transition().duration(750)
// 	          .attr("opacity", 1)
// 	          .attr("transform", function() { return "rotate(" + computeTextRotation(e) + ")" })
// 	          .attr("x", function(d) { return y(d.y); });
// 	      }
// 	    });
//   }
//
// // Setup for switching data: stash the old values for transition.
// function stash(d) {
//   d.x0 = d.x;
//   d.dx0 = d.dx;
// }
//
// // When switching data: interpolate the arcs in data space.
// function arcTweenData(a, i) {
//   var oi = d3.interpolate({x: a.x0, dx: a.dx0}, a);
//   function tween(t) {
//     var b = oi(t);
//     a.x0 = b.x;
//     a.dx0 = b.dx;
//     return arc(b);
//   }
//   if (i == 0) {
//    // If we are on the first arc, adjust the x domain to match the root node
//    // at the current zoom level. (We only need to do this once.)
//     var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]);
//     return function(t) {
//       x.domain(xd(t));
//       return tween(t);
//     };
//   } else {
//     return tween;
//   }
// }
//
// // When zooming: interpolate the scales.
// function arcTweenZoom(d) {
//   var xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),
//       yd = d3.interpolate(y.domain(), [d.y, 1]),
//       yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);
//   return function(d, i) {
//     return i
//         ? function(t) {
// 					return arc(d);
// 				}
//         : function(t) {
// 					x.domain(xd(t));
// 					y.domain(yd(t)).range(yr(t));
// 					return arc(d);
// 				};
//   };
// }
// </script>



