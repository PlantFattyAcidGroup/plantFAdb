<% content_for :head do -%>
	<script src="http://d3js.org/d3.v3.min.js"/>
<% end -%>
	
<% content_for :jumbo do -%>
<div class="row">
	<div class="col-md-8">
		<h1>Quizzing the Chemical Factories of Oilseeds</h1>
		<p style='text-align: justify;'>
			A database of hundreds of fatty acid structures synthesized by thousands of plant species and the phylogenetic relationships between them
		</p>
		<ul>
			<li>What fatty acids do plants make?</li>
			<li>What are the phyologenetic relationships between different plant species that produce different structures?</li>
		</ul>
		<sub>PhyloFAdb has been developed based on the Seed Oil Fatty Acid (SOFA) database at the Max Rubner-Institut (http://sofa.mri.bund.de). Matthäus, Bertrand. "The new database seed oil fatty acids (SOFA)." Lipid Technology 24.10 (2012): 230-234.    Aitzetmüller, Kurt, Bertrand Matthäus, and Holger Friedrich. "A new database for seed oil fatty acids—the database SOFA." European Journal of Lipid Science and Technology 105.2 (2003): 92-103.
</sub>
	</div>
	<div class="col-md-4">
		<%= image_tag "castor.jpg", class: 'img-thumbnail' %>
	</div>
</div>
<% end -%>
<% if @selected %>
	Showing maximum <%= @selected.name %> value for each order ... <br/>
<% else %>
  Showing count of results in each order ... <br/>
<% end %>
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
<div>
  <%= form_tag nil, method: :get, class: 'form-inline search' do %>
    <div class='form-group pull-right'>
	    <label for="query">Molecule:</label>
			<%= select_tag :measure, options_from_collection_for_select(@fatty_acids, :id, :name_with_count, params[:measure]),include_blank: true, class: 'form-control' %>
			<%= submit_tag "Update", class: "btn btn-primary "%>
		</div>
  <% end %>
</div>

<div id='tree' class='graph' style="width:90%;margin-left:5%"></div>
<style>
text.inner-label {
	font-family: Verdana;
	font-weight: bold;
	fill: #222;
	
}
text.outer-label {
	font-family: Verdana;
	font-weight: bold;
	fill: #222;
	
}
</style>


	<script>
	phyloColors ={
		root: "#444",
    spermatophyte: "#DDD",
    gymnosperms: "#B0744C",
    anita: "#D3EEF5",
    angiosperms: "#D3EEF5",
    magnoliids: "#86C0CE",
    monocots: "#B0D4B7",
    commelinids: "#63B384",
    eudicots: "#FFF27B",
    core_eudicots: "#C6D979",
    rosids: "#F4D2DD",
    fabids: "#ECB5CA",
    malvids: "#E58BAF",
    asterid: "#F6D7BA",
    lamiids: "#EEB688",
    campanulids: "#E6955E",
	}
		function computeTextRotation(d) {			
			return (x(d.x + d.dx / 2) - Math.PI / 2) / Math.PI * 180;
			//return (x(d.x +d.dx*.5) * (180/Math.PI)-90)
		}
		function textOpacity(d){
			var path = document.getElementById("path-"+d.id);
			if( (this.getComputedTextLength()) > path.getTotalLength()/2 || d.name == 'root'){
				return 0;
			}else{
				return 1;
			}
		}	

		var width = $("#tree").width(),
			height = width;

		var svg = d3.select("#tree").append("svg")
		    .attr("width", width)
		    .attr("height", height)
		  .append("g")
		    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
				
		// Partition with value 1 == no 'child' size change
		var partition = d3.layout.partition()
		    .sort(null)
		    .value(function(d) { return 1; });

		// Keep track of the node that is currently being displayed as the root.
		var node;

		var	root = <%= @tree.to_json.html_safe %>
		root=root[0];
		node = root;
			
		// groups
	  var g = svg.datum(root).selectAll("g")
	  .data(partition.nodes)
	  .enter().append("g")
		
		// parent / child
		var parent_g = g.filter(function(d){ return d.children!=null})
		var leaf_g = g.filter(function(d){ return d.children==null})
		
		var maxVal = d3.max(leaf_g.data(),function(d){return d.v1;})
		
		// setup domains
		var outerRing = width*.1 // 10%
		innerRingPadding = 2
		outerHistBuffer = width*.1
		histPadding = innerRingPadding
		radius = (width / 2)-(outerHistBuffer+outerRing+innerRingPadding+histPadding);
		
		//outer font size
		var maxName = d3.max(leaf_g.data(), function(d){return d.common_name.length});
		var labelTextSize = Math.floor((outerRing-innerRingPadding) / (maxName+2))*1.8;
		
		var hx = d3.scale.linear()
				.range([0,outerHistBuffer])
				.domain([0,maxVal])
		
		var x = d3.scale.linear()
		    .range([0, 2 * Math.PI]);

		var y = d3.scale.linear()
		    .range([20, radius]);


		// bars for datapoints
		var histArc = d3.svg.arc()
		    .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx*.25))); })
		    .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx*.75))); })
		    .innerRadius(function(d) { 
					return Math.max(0, y(1-d.dy)+outerRing+histPadding);
				})
		    .outerRadius(function(d) {
					return Math.max(0, y(1-d.dy)+outerRing+histPadding+hx(d.v1));
				});
		
		// Leaf nodes are 'pushed' to the outter most layer
		var arc = d3.svg.arc()
		    .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })
		    .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })
		    .innerRadius(function(d) { 
					if(d.children){
						return Math.max(0, y(d.y));
					}else{
						return Math.max(0, y(1-d.dy)+innerRingPadding);
					}
				})
		    .outerRadius(function(d) {
					if(d.children){
						return Math.max(0, y(d.y + d.dy)); 
					}else{
						return Math.max(0, y(1-d.dy)+outerRing);
					}
				});
				
		var labelArc = d3.svg.arc()
				// This arc 'flips' to show text in the proper orientation
				.startAngle(function(d) {
					var end = x(d.x+d.dx);
					var start = x(d.x);
					var half = (end-start)/2;
					var point = (end-half)*180/Math.PI;
					if(start <0){return 0;}
					return Math.max(0, Math.min(2 * Math.PI, ( (point<270 && point>90) ? x(d.x+d.dx) : x(d.x)) )); })
				.endAngle(function(d) {
					var end = x(d.x+d.dx);
					var start = x(d.x);
					var half = (end-start)/2;
					var point = (end-half)*180/Math.PI;
					if(start<=0 && end >= (Math.PI*2) ){return (Math.PI*4)}
					return Math.max(0, Math.min(2 * Math.PI, ( (point<270&&point>90) ? x(d.x) : x(d.x+d.dx)) )); })
		    .innerRadius(function(d) {
					var end = x(d.x+d.dx);
					var start = x(d.x);
					var half = (end-start)/2;
					var point = (end-half)*180/Math.PI;
					if(start<=0 && end >= (Math.PI*2) ){point=0}
					return Math.max(0, (point<270&&point>90) ? y(d.y + d.dy)-Math.min(y(d.dy*.25),3.5) : y(d.y)+Math.min(y(d.dy*.25),3.5)); 
				})
		    .outerRadius(function(d) {
					var end = x(d.x+d.dx);
					var start = x(d.x);
					var half = (end-start)/2;
					var point = (end-half)*180/Math.PI;
					if(start<=0 && end >= (Math.PI*2) ){point=0}
					return Math.max(0, (point<270&&point>90) ? y(d.y + d.dy)-Math.min(y(d.dy*.25),3.5) : y(d.y)+Math.min(y(d.dy*.25),3.5)); 
				});
				
// arcs
			var path = g.append("path")
		    .attr("d", arc)
				.style("fill", function(d){
					return d.name=='root' ? 'rgba(70,70,70,.7)' : 
					phyloColors[(d.children ? d : d.parent).name.toLowerCase().replace(" ", "_")];
				})
				.style("stroke",function(d){
					return d.children ? '#FFF' : ''
				})
				.on("click", click)
		    .each(stash);
				
// parent label paths
			var labelpath = parent_g.append("path")
				.attr("d",labelArc)
				.attr("id",function(d,i){return "path-"+d.id})
				.attr("fill",'none')
				.attr("stroke",'none')
						

				
// parent labels
			var p_text = parent_g.append("text")
				.attr("class","inner-label")
				.attr("pointer-events", "none")
				.attr('text-anchor', 'middle')
				.style("font-size",function(d){
					return Math.min([y(d.dy)*.5],14)+"px"
				})
				.append("textPath")
				.attr('startOffset', '25%')
				.attr("xlink:href", function(d){return "#path-"+d.id})
				.text(function(d) {return d.common_name;})
				.attr('opacity',textOpacity)

// leaf labels
			var c_text_g = leaf_g.append("g")
		 		// translate to the desired point and set the rotation
				.attr("transform", function(d){ return "rotate(" + computeTextRotation(d) + ") translate("+y(1-d.dy)+")";})
				
			var c_text = c_text_g.append("text")
				.attr('text-anchor', 'middle')
				.attr("class","outer-label")
				.attr("pointer-events","none")
				.style("font-size",function(d){
					return labelTextSize+"px"
				})
				.text(function(d){return d.name})
				.attr("transform", function(d){
					return "translate("+((this.getComputedTextLength()/2.0)+innerRingPadding+(labelTextSize/2.0))+") rotate("+(x(d.x)>Math.PI ? 180 : 0)+")"})
		 		.attr("dy", ".3em") // vertical-align
			
// Bar histogram
			var bar_path = leaf_g.append("path")
				.attr("d", histArc)
				.attr("fill",'#333')
					
					
					
			// Tween data
			// d3.selectAll("input").on("change", function change() {
			// 		    var value = this.value === "count"
			// 		        ? function() { return 1; }
			// 		        : function(d) { return d.size; };
			//
			// 		    path
			// 			.data(partition.value(value).nodes)
			// 		      .transition()
			// 		        .duration(700)
			// 		        .attrTween("d", arcTweenData);
			// 		  });

		  function click(d) {
		    node = d;
		    // fade out all text elements
				// 		    p_text.attr("opacity", 0);
				var dur = 1000;
				
	    	path.transition()
	      	.duration(dur)
	      	.attrTween("d", arcTweenZoom(d))
					.attr("opacity", function(d){
						return d.y < node.y ? 0.5 : 1 
					})
				
				// inner labels
		    labelpath.transition()
		      .duration(dur)
		      .attrTween("d", labelArcTweenZoom)
					
					p_text.transition().duration(dur).each('end',function(){
						var d = d3.select(this);
						d.attr('opacity', textOpacity);
					})
				
				//outer labels
				c_text_g.attr("opacity", function(d){return (d.x >= node.x && (d.x + d.dx).toFixed(3) <= (node.x + node.dx).toFixed(3))  ? 1 : 0 }); //hide out of range
				c_text_g.transition().duration(dur)
				.attrTween("transform", outer_g_tween_zoom())
				.select("text")
				.attrTween("transform", outer_c_tween_zoom())
				
				//bars
				bar_path.transition().duration(dur)
				.attrTween("d", histArcTweenZoom)
		  }

		// Setup for switching data: stash the old values for transition.
		function stash(d) {
		  d.x0 = d.x;
		  d.dx0 = d.dx;
		}
		
		function outer_g_tween_zoom(){
			return function(d, i) {
				return function(t){
					return "rotate(" + ((x(d.x + d.dx / 2) - Math.PI / 2) / Math.PI * 180) + ") translate("+y(1-d.dy)+")"
				}
			}
		}
		function outer_c_tween_zoom(){
			return function(d, i) {
				var me = this;
				return function(t){
					return "translate("+((me.getComputedTextLength()/2.0)+innerRingPadding+(labelTextSize/2.0))+") rotate("+(x(d.x)>Math.PI ? 180 : 0)+")"
				}
			}
		}

		// When switching data: interpolate the arcs in data space.
		function arcTweenData(a, i) {
		  var oi = d3.interpolate({x: a.x0, dx: a.dx0}, a);
		  function tween(t) {
		    var b = oi(t);
		    a.x0 = b.x;
		    a.dx0 = b.dx;
		    return arc(b);
		  }
		  if (i == 0) {
		   // If we are on the first arc, adjust the x domain to match the root node
		   // at the current zoom level. (We only need to do this once.)
		    var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]);
		    return function(t) {
		      x.domain(xd(t));
		      return tween(t);
		    };
		  } else {
		    return tween;
		  }
		}

		// When zooming: interpolate the scales.
		function arcTweenZoom(d) {
		  var xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]); // Clicked node's domain
			//yd = d3.interpolate(y.domain(), [d.y, 1]); // clicked node's begin radius to 100%
					//yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]); // root node - no padding otherwise add 20px
		  return function(d, i) {
				// first / root node actually changes the domain
		    if(i){
					return function(t) {
						return arc(d);
					}
				// all others
		    }else{
					return function(t) {
						x.domain(xd(t));
						//y.domain(yd(t))//.range(yr(t));
						return arc(d);
					};
		    }
		  };
		}
		function labelArcTweenZoom(d) {
			return function(t) {
				return labelArc(d);
			};
		}
		function histArcTweenZoom(d){
			return function(t){
				return histArc(d);
			}
		}
		</script>