<% content_for :head do -%>
	<script src="http://d3js.org/d3.v3.min.js"/>
<% end -%>
	
<% content_for :jumbo do -%>
<div class="row">
	<div class="col-md-8">
		<h1>Phylogenetic Fatty Acid Database</h1>
		<p style='text-align: justify;'>
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
		</p>
	</div>
	<div class="col-md-4">
		<%= image_tag "castor.jpg", class: 'img-thumbnail' %>
	</div>
</div>
<% end -%>
<div>
  <%= form_tag nil, method: :get, class: 'form-inline search' do %>
    <div class='form-group pull-right'>
	    <label for="query">Molecule:</label>
			<%= select_tag :value, options_from_collection_for_select(@fatty_acids, :delta_notation, :name_with_count, params[:value]),include_blank: true, class: 'form-control' %>
			<%= submit_tag "Update", class: "btn btn-primary "%>
		</div>
  <% end %>
</div>
<div id='tree'></div>
<div id='icicle' class='graph'></div>
<div id='tree' class='graph'></div>
<div class="mouse tooltip" >Mouse-tracking HTML Tip</div>
<style>

.text {
	text-shadow:2px 2px 1px #444;
}

.tooltip {
	border-radius: 5px;
	padding: 1em;
  pointer-events:none;
  opacity:0;
  transition: opacity 0.3s;
	text-shadow:2px 2px 1px #444;
	box-shadow:3px 3px 5px #444;
	border:2px solid #FFF;
	background-color: #89A;
	color: #FFF;
	position: absolute;
/*  text-align:center;*/
}
/*path {
  stroke: #fff;
  fill-rule: evenodd;
}*/
rect {
  stroke: #fff;
}

.node circle {
  fill: #fff;
  stroke: steelblue;
  stroke-width: 1.5px;
}

.node {
  font: 10px sans-serif;
}

.link {
  fill: none;
  stroke: #ccc;
  stroke-width: 1.5px;
}
</style>

<script>

//var width = 960,
var width = $("#icicle").width()
    height = 1000;

var x = d3.scale.linear()
    .range([0, width]);

var y = d3.scale.linear()
    .range([0, height]);

var color = d3.scale.category20b();

var	root = <%= @tree.to_json.html_safe %>
var partition = d3.layout.partition()
    .sort(null)
    //.value(function(d) { return 1; });
		.value(function(d) { return d.value });
		


//var partition = d3.layout.partition()
    //.children(function(d) { return isNaN(d.value) ? d3.entries(d.value) : null; })
    //.value(function(d) { return d.value });
		var diameter = 900;		
		var tree = d3.layout.cluster()
			.size([height, width/2])
			//.separation(function(a, b) { return (a.parent == b.parent ? 1 : 2) / a.depth; });
		var diagonal = d3.svg.diagonal()
	    .projection(function(d) { return [d.y, d.x]; });
	    //.projection(function(d) { return [d.y, d.x / 180 * Math.PI]; });

	// var svg = d3.select("#tree").append("svg")
	//     .attr("width", width)
	//     .attr("height", height)
	// 		.append("g")
	//     .attr("transform", "translate(5,0)");
	    //attr("transform", "translate(" + diameter / 2 + "," + diameter / 2 + ")");
			
			var nodes = tree.nodes(root[0]);
      var links = tree.links(nodes);	
	
			var min = d3.min(nodes.map(function(d){return parseFloat(d.value)}))
			var max = d3.max(nodes.map(function(d){return parseFloat(d.value)}))
			console.log(min, max);

	var nodeScale = d3.scale.linear().domain([min,max]).range([2,8])
	var colorScale = d3.scale.linear()
	    .domain([min, (max-min)/2, max])
	    .range(["red", "white", "green"]);
			
	//   var link = svg.selectAll(".link")
	//       .data(links)
	//     .enter().append("path")
	//       .attr("class", "link")
	//       .attr("d", diagonal);
	//
	// var node = svg.selectAll(".node")
	//       .data(nodes)
	//     .enter().append("g")
	//       .attr("class", "node")
	//       //.attr("transform", function(d) { return "rotate(" + (d.x - 90) + ")translate(" + d.x + ")"; })
	//       .attr("transform", function(d) { return "translate(" + d.y + ","+d.x+")"; })
	//
	//   node.append("circle")
	//       .attr("r", function(d){return nodeScale(d.value)})
	// 		.style("stroke",function(d){return colorScale(d.value)})
	//   node.append("text")
	//       .attr("dx", function(d) { return d.children ? -8 : 8; })
	//       .attr("dy", 3)
	//       .style("text-anchor", function(d) { return d.children ? "end" : "start"; })
	// 		.text(function(d) { return d.name; });
				
var svg = d3.select("#icicle").append("svg")
    .attr("width", width)
    .attr("height", height);


var tooltip = d3.select(".tooltip")

  var g = svg.selectAll("g")
		.data(partition(root[0]))
    .enter().append("g")
	var rect = g.append("a")
    .each( function(d){ if(!d.children){d3.select(this).attr("target",'_blank').attr("xlink:href", "<%= plants_url %>?query="+d.name) } })
		.append("rect")
    .attr("x", function(d) { return x(d.x); })
    .attr("y", function(d) { return y(d.y); })
    .attr("width", function(d) { return x(d.dx); })
    .attr("height", function(d) { return y(d.dy); })
    .attr("fill", function(d) { return color((d.children ? d : (d.parent ? d.parent : d)).common_name); })
    .on("click", clicked)
		.on('mouseover', function(d){
			tooltip.style("opacity", "1")
			.html(d.name+" ("+d.common_name+")"+(d.children ? '' : "<br/>Value: "+d.value))
			.style('background-color',color((d.children ? d : (d.parent ? d.parent : d)).common_name))
		})
		.on('mousemove', function(d){
			tooltip
			.style("left", Math.max(0, d3.event.pageX - 15) + "px")
      .style("top", (d3.event.pageY - 60) + "px");
		})
		.on('mouseout', function(d){
			return tooltip.style("opacity", "0");
		})
			
	var text = g.append("text")
		.classed('text',true)
		.text(function(d) { return d.common_name})
		.attr('font-size',12)
		.attr('fill',"#FFF")
		.attr("opacity", function(d){return x(d.dx) > this.getComputedTextLength() ? '1' : '0'})
		.attr("y", function(d) { return y(d.y) + (y(d.dy)/2) ; })
		.attr("x", function(d){return x(d.x) + (x(d.dx)/2) - (this.getComputedTextLength()/2)})
		.attr("pointer-events", "none")
	
function clicked(d) {

	if(d.children){
	  x.domain([d.x, d.x + d.dx]);
	  y.domain([d.y, 1]).range([d.y ? 20 : 0, height]);

	  rect.transition()
	      .duration(750)
	      .attr("x", function(d) { return x(d.x); })
	      .attr("y", function(d) { return y(d.y); })
	      .attr("width", function(d) { return x(d.x + d.dx) - x(d.x); })
	      .attr("height", function(d) { return y(d.y + d.dy) - y(d.y); });
	
		text.transition()
			.duration(750)
			.attr("y", function(d) { return y(d.y) + (y(d.y + d.dy) - y(d.y))/2 ; })
			.attr("x", function(d){return x(d.x) + (x(d.x + d.dx) - x(d.x))/2 - (this.getComputedTextLength()/2)})
			.attr("opacity",function(d){return (x(d.x + d.dx) - x(d.x)) > this.getComputedTextLength() ? '1' : '0'})
	}else{
		// Leaf nodes open new page
		//window.location
	}
}

</script>



